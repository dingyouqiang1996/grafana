// SPDX-License-Identifier: AGPL-3.0-only

// Code generated by lister-gen. DO NOT EDIT.

package v0alpha1

import (
	v0alpha1 "github.com/grafana/grafana/pkg/apis/alerting_notifications/v0alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TemplateGroupLister helps list TemplateGroups.
// All objects returned here must be treated as read-only.
type TemplateGroupLister interface {
	// List lists all TemplateGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v0alpha1.TemplateGroup, err error)
	// TemplateGroups returns an object that can list and get TemplateGroups.
	TemplateGroups(namespace string) TemplateGroupNamespaceLister
	TemplateGroupListerExpansion
}

// templateGroupLister implements the TemplateGroupLister interface.
type templateGroupLister struct {
	indexer cache.Indexer
}

// NewTemplateGroupLister returns a new TemplateGroupLister.
func NewTemplateGroupLister(indexer cache.Indexer) TemplateGroupLister {
	return &templateGroupLister{indexer: indexer}
}

// List lists all TemplateGroups in the indexer.
func (s *templateGroupLister) List(selector labels.Selector) (ret []*v0alpha1.TemplateGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v0alpha1.TemplateGroup))
	})
	return ret, err
}

// TemplateGroups returns an object that can list and get TemplateGroups.
func (s *templateGroupLister) TemplateGroups(namespace string) TemplateGroupNamespaceLister {
	return templateGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TemplateGroupNamespaceLister helps list and get TemplateGroups.
// All objects returned here must be treated as read-only.
type TemplateGroupNamespaceLister interface {
	// List lists all TemplateGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v0alpha1.TemplateGroup, err error)
	// Get retrieves the TemplateGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v0alpha1.TemplateGroup, error)
	TemplateGroupNamespaceListerExpansion
}

// templateGroupNamespaceLister implements the TemplateGroupNamespaceLister
// interface.
type templateGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TemplateGroups in the indexer for a given namespace.
func (s templateGroupNamespaceLister) List(selector labels.Selector) (ret []*v0alpha1.TemplateGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v0alpha1.TemplateGroup))
	})
	return ret, err
}

// Get retrieves the TemplateGroup from the indexer for a given namespace and name.
func (s templateGroupNamespaceLister) Get(name string) (*v0alpha1.TemplateGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v0alpha1.Resource("templategroup"), name)
	}
	return obj.(*v0alpha1.TemplateGroup), nil
}
